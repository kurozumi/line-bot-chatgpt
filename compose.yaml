
services:
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./public:/app/public:ro
      - ./var/log/nginx:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped

  app:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - /app/vendor
      - /app/var
    environment:
      - APP_ENV=${APP_ENV:-prod}
      - APP_DEBUG=${APP_DEBUG:-0}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/${POSTGRES_DB:-app}?serverVersion=16&charset=utf8
      - MESSENGER_TRANSPORT_DSN=doctrine://default?auto_setup=0
      - LINE_ACCESS_TOKEN=${LINE_ACCESS_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "
        if [ \"$APP_ENV\" = \"dev\" ]; then
          composer install &&
          php bin/console cache:clear --env=dev &&
          php bin/console doctrine:database:create --if-not-exists &&
          php bin/console doctrine:schema:update --force &&
          php bin/console messenger:setup-transports &&
          php-fpm
        else
          composer install --no-dev --optimize-autoloader &&
          php bin/console cache:clear --env=prod &&
          php bin/console doctrine:database:create --if-not-exists &&
          php bin/console doctrine:schema:update --force &&
          php bin/console messenger:setup-transports &&
          supervisord -c /etc/supervisord.conf
        fi
      "

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
      - /app/vendor
      - /app/var
    environment:
      - APP_ENV=${APP_ENV:-prod}
      - APP_DEBUG=${APP_DEBUG:-0}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-!ChangeMe!}@database:5432/${POSTGRES_DB:-app}?serverVersion=16&charset=utf8
      - MESSENGER_TRANSPORT_DSN=doctrine://default?auto_setup=0
      - LINE_ACCESS_TOKEN=${LINE_ACCESS_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "
        if [ \"$APP_ENV\" = \"dev\" ]; then
          composer install &&
          php bin/console cache:clear --env=dev &&
          php bin/console messenger:consume async -vv
        else
          composer install --no-dev --optimize-autoloader &&
          php bin/console cache:clear --env=prod &&
          php bin/console messenger:consume async -vv
        fi
      "

###> doctrine/doctrine-bundle ###
  database:
    image: postgres:${POSTGRES_VERSION:-16}-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      # You should definitely change the password in production
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-!ChangeMe!}
      POSTGRES_USER: ${POSTGRES_USER:-app}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB:-app}", "-U", "${POSTGRES_USER:-app}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
      # You may use a bind-mounted host directory instead, so that it is harder to accidentally remove the volume and lose all your data!
      # - ./docker/db/data:/var/lib/postgresql/data:rw
    restart: unless-stopped
###< doctrine/doctrine-bundle ###

volumes:
###> doctrine/doctrine-bundle ###
  database_data:
###< doctrine/doctrine-bundle ###
